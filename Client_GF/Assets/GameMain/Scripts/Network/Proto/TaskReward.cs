// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: TaskReward.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace GameMessage {

  /// <summary>Holder for reflection information generated from TaskReward.proto</summary>
  public static partial class TaskRewardReflection {

    #region Descriptor
    /// <summary>File descriptor for TaskReward.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TaskRewardReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBUYXNrUmV3YXJkLnByb3RvEgtHYW1lTWVzc2FnZSIgChFSZXFUYWtlVGFz",
            "a1Jld2FyZBILCgNyaWQYASABKAUiSwoRUnNwVGFrZVRhc2tSZXdhcmQSDAoE",
            "Y29pbhgBIAEoBRIKCgJsdhgCIAEoBRILCgNleHAYAyABKAUSDwoHdGFza0Fy",
            "chgEIAMoCSIeCgtQc2hUYXNrUHJncxIPCgd0YXNrQXJyGAEgAygJYgZwcm90",
            "bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMessage.ReqTakeTaskReward), global::GameMessage.ReqTakeTaskReward.Parser, new[]{ "Rid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMessage.RspTakeTaskReward), global::GameMessage.RspTakeTaskReward.Parser, new[]{ "Coin", "Lv", "Exp", "TaskArr" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMessage.PshTaskPrgs), global::GameMessage.PshTaskPrgs.Parser, new[]{ "TaskArr" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ReqTakeTaskReward : pb::IMessage<ReqTakeTaskReward> {
    private static readonly pb::MessageParser<ReqTakeTaskReward> _parser = new pb::MessageParser<ReqTakeTaskReward>(() => new ReqTakeTaskReward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqTakeTaskReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMessage.TaskRewardReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqTakeTaskReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqTakeTaskReward(ReqTakeTaskReward other) : this() {
      rid_ = other.rid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqTakeTaskReward Clone() {
      return new ReqTakeTaskReward(this);
    }

    /// <summary>Field number for the "rid" field.</summary>
    public const int RidFieldNumber = 1;
    private int rid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rid {
      get { return rid_; }
      set {
        rid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqTakeTaskReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqTakeTaskReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Rid != other.Rid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Rid != 0) hash ^= Rid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Rid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Rid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Rid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqTakeTaskReward other) {
      if (other == null) {
        return;
      }
      if (other.Rid != 0) {
        Rid = other.Rid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Rid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RspTakeTaskReward : pb::IMessage<RspTakeTaskReward> {
    private static readonly pb::MessageParser<RspTakeTaskReward> _parser = new pb::MessageParser<RspTakeTaskReward>(() => new RspTakeTaskReward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RspTakeTaskReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMessage.TaskRewardReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RspTakeTaskReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RspTakeTaskReward(RspTakeTaskReward other) : this() {
      coin_ = other.coin_;
      lv_ = other.lv_;
      exp_ = other.exp_;
      taskArr_ = other.taskArr_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RspTakeTaskReward Clone() {
      return new RspTakeTaskReward(this);
    }

    /// <summary>Field number for the "coin" field.</summary>
    public const int CoinFieldNumber = 1;
    private int coin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Coin {
      get { return coin_; }
      set {
        coin_ = value;
      }
    }

    /// <summary>Field number for the "lv" field.</summary>
    public const int LvFieldNumber = 2;
    private int lv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Lv {
      get { return lv_; }
      set {
        lv_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 3;
    private int exp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "taskArr" field.</summary>
    public const int TaskArrFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_taskArr_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> taskArr_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> TaskArr {
      get { return taskArr_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RspTakeTaskReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RspTakeTaskReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Coin != other.Coin) return false;
      if (Lv != other.Lv) return false;
      if (Exp != other.Exp) return false;
      if(!taskArr_.Equals(other.taskArr_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Coin != 0) hash ^= Coin.GetHashCode();
      if (Lv != 0) hash ^= Lv.GetHashCode();
      if (Exp != 0) hash ^= Exp.GetHashCode();
      hash ^= taskArr_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Coin != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Coin);
      }
      if (Lv != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Lv);
      }
      if (Exp != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Exp);
      }
      taskArr_.WriteTo(output, _repeated_taskArr_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Coin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Coin);
      }
      if (Lv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lv);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
      }
      size += taskArr_.CalculateSize(_repeated_taskArr_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RspTakeTaskReward other) {
      if (other == null) {
        return;
      }
      if (other.Coin != 0) {
        Coin = other.Coin;
      }
      if (other.Lv != 0) {
        Lv = other.Lv;
      }
      if (other.Exp != 0) {
        Exp = other.Exp;
      }
      taskArr_.Add(other.taskArr_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Coin = input.ReadInt32();
            break;
          }
          case 16: {
            Lv = input.ReadInt32();
            break;
          }
          case 24: {
            Exp = input.ReadInt32();
            break;
          }
          case 34: {
            taskArr_.AddEntriesFrom(input, _repeated_taskArr_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PshTaskPrgs : pb::IMessage<PshTaskPrgs> {
    private static readonly pb::MessageParser<PshTaskPrgs> _parser = new pb::MessageParser<PshTaskPrgs>(() => new PshTaskPrgs());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PshTaskPrgs> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMessage.TaskRewardReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PshTaskPrgs() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PshTaskPrgs(PshTaskPrgs other) : this() {
      taskArr_ = other.taskArr_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PshTaskPrgs Clone() {
      return new PshTaskPrgs(this);
    }

    /// <summary>Field number for the "taskArr" field.</summary>
    public const int TaskArrFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_taskArr_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> taskArr_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> TaskArr {
      get { return taskArr_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PshTaskPrgs);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PshTaskPrgs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!taskArr_.Equals(other.taskArr_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= taskArr_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      taskArr_.WriteTo(output, _repeated_taskArr_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += taskArr_.CalculateSize(_repeated_taskArr_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PshTaskPrgs other) {
      if (other == null) {
        return;
      }
      taskArr_.Add(other.taskArr_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            taskArr_.AddEntriesFrom(input, _repeated_taskArr_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
