// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: PlayerData.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace GameMessage {

  /// <summary>Holder for reflection information generated from PlayerData.proto</summary>
  public static partial class PlayerDataReflection {

    #region Descriptor
    /// <summary>File descriptor for PlayerData.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PlayerDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBQbGF5ZXJEYXRhLnByb3RvEgtHYW1lTWVzc2FnZSLDAgoKUGxheWVyRGF0",
            "YRIKCgJpZBgBIAEoBRIMCgRuYW1lGAIgASgJEgoKAmx2GAMgASgFEgsKA2V4",
            "cBgEIAEoBRINCgVwb3dlchgFIAEoBRIMCgRjb2luGAYgASgFEg8KB2RpYW1v",
            "bmQYByABKAUSDwoHY3J5c3RhbBgIIAEoBRIKCgJocBgJIAEoBRIKCgJhZBgK",
            "IAEoBRIKCgJhcBgLIAEoBRINCgVhZGRlZhgMIAEoBRINCgVhcGRlZhgNIAEo",
            "BRINCgVkb2RnZRgOIAEoBRIOCgZwaWVyY2UYDyABKAUSEAoIY3JpdGljYWwY",
            "ECABKAUSDwoHZ3VpZGVpZBgRIAEoBRIRCglzdHJvbmdBcnIYEiADKAUSDAoE",
            "dGltZRgTIAEoAxIPCgd0YXNrQXJyGBQgAygJEg0KBWZ1YmVuGBUgASgFYgZw",
            "cm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMessage.PlayerData), global::GameMessage.PlayerData.Parser, new[]{ "Id", "Name", "Lv", "Exp", "Power", "Coin", "Diamond", "Crystal", "Hp", "Ad", "Ap", "Addef", "Apdef", "Dodge", "Pierce", "Critical", "Guideid", "StrongArr", "Time", "TaskArr", "Fuben" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PlayerData : pb::IMessage<PlayerData> {
    private static readonly pb::MessageParser<PlayerData> _parser = new pb::MessageParser<PlayerData>(() => new PlayerData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMessage.PlayerDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerData(PlayerData other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      lv_ = other.lv_;
      exp_ = other.exp_;
      power_ = other.power_;
      coin_ = other.coin_;
      diamond_ = other.diamond_;
      crystal_ = other.crystal_;
      hp_ = other.hp_;
      ad_ = other.ad_;
      ap_ = other.ap_;
      addef_ = other.addef_;
      apdef_ = other.apdef_;
      dodge_ = other.dodge_;
      pierce_ = other.pierce_;
      critical_ = other.critical_;
      guideid_ = other.guideid_;
      strongArr_ = other.strongArr_.Clone();
      time_ = other.time_;
      taskArr_ = other.taskArr_.Clone();
      fuben_ = other.fuben_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerData Clone() {
      return new PlayerData(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lv" field.</summary>
    public const int LvFieldNumber = 3;
    private int lv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Lv {
      get { return lv_; }
      set {
        lv_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 4;
    private int exp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "power" field.</summary>
    public const int PowerFieldNumber = 5;
    private int power_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    /// <summary>Field number for the "coin" field.</summary>
    public const int CoinFieldNumber = 6;
    private int coin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Coin {
      get { return coin_; }
      set {
        coin_ = value;
      }
    }

    /// <summary>Field number for the "diamond" field.</summary>
    public const int DiamondFieldNumber = 7;
    private int diamond_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Diamond {
      get { return diamond_; }
      set {
        diamond_ = value;
      }
    }

    /// <summary>Field number for the "crystal" field.</summary>
    public const int CrystalFieldNumber = 8;
    private int crystal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Crystal {
      get { return crystal_; }
      set {
        crystal_ = value;
      }
    }

    /// <summary>Field number for the "hp" field.</summary>
    public const int HpFieldNumber = 9;
    private int hp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    /// <summary>Field number for the "ad" field.</summary>
    public const int AdFieldNumber = 10;
    private int ad_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ad {
      get { return ad_; }
      set {
        ad_ = value;
      }
    }

    /// <summary>Field number for the "ap" field.</summary>
    public const int ApFieldNumber = 11;
    private int ap_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ap {
      get { return ap_; }
      set {
        ap_ = value;
      }
    }

    /// <summary>Field number for the "addef" field.</summary>
    public const int AddefFieldNumber = 12;
    private int addef_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Addef {
      get { return addef_; }
      set {
        addef_ = value;
      }
    }

    /// <summary>Field number for the "apdef" field.</summary>
    public const int ApdefFieldNumber = 13;
    private int apdef_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Apdef {
      get { return apdef_; }
      set {
        apdef_ = value;
      }
    }

    /// <summary>Field number for the "dodge" field.</summary>
    public const int DodgeFieldNumber = 14;
    private int dodge_;
    /// <summary>
    ///闪避概率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Dodge {
      get { return dodge_; }
      set {
        dodge_ = value;
      }
    }

    /// <summary>Field number for the "pierce" field.</summary>
    public const int PierceFieldNumber = 15;
    private int pierce_;
    /// <summary>
    ///穿透比率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pierce {
      get { return pierce_; }
      set {
        pierce_ = value;
      }
    }

    /// <summary>Field number for the "critical" field.</summary>
    public const int CriticalFieldNumber = 16;
    private int critical_;
    /// <summary>
    ///暴击概率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Critical {
      get { return critical_; }
      set {
        critical_ = value;
      }
    }

    /// <summary>Field number for the "guideid" field.</summary>
    public const int GuideidFieldNumber = 17;
    private int guideid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Guideid {
      get { return guideid_; }
      set {
        guideid_ = value;
      }
    }

    /// <summary>Field number for the "strongArr" field.</summary>
    public const int StrongArrFieldNumber = 18;
    private static readonly pb::FieldCodec<int> _repeated_strongArr_codec
        = pb::FieldCodec.ForInt32(146);
    private readonly pbc::RepeatedField<int> strongArr_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> StrongArr {
      get { return strongArr_; }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 19;
    private long time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "taskArr" field.</summary>
    public const int TaskArrFieldNumber = 20;
    private static readonly pb::FieldCodec<string> _repeated_taskArr_codec
        = pb::FieldCodec.ForString(162);
    private readonly pbc::RepeatedField<string> taskArr_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> TaskArr {
      get { return taskArr_; }
    }

    /// <summary>Field number for the "fuben" field.</summary>
    public const int FubenFieldNumber = 21;
    private int fuben_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Fuben {
      get { return fuben_; }
      set {
        fuben_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Lv != other.Lv) return false;
      if (Exp != other.Exp) return false;
      if (Power != other.Power) return false;
      if (Coin != other.Coin) return false;
      if (Diamond != other.Diamond) return false;
      if (Crystal != other.Crystal) return false;
      if (Hp != other.Hp) return false;
      if (Ad != other.Ad) return false;
      if (Ap != other.Ap) return false;
      if (Addef != other.Addef) return false;
      if (Apdef != other.Apdef) return false;
      if (Dodge != other.Dodge) return false;
      if (Pierce != other.Pierce) return false;
      if (Critical != other.Critical) return false;
      if (Guideid != other.Guideid) return false;
      if(!strongArr_.Equals(other.strongArr_)) return false;
      if (Time != other.Time) return false;
      if(!taskArr_.Equals(other.taskArr_)) return false;
      if (Fuben != other.Fuben) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Lv != 0) hash ^= Lv.GetHashCode();
      if (Exp != 0) hash ^= Exp.GetHashCode();
      if (Power != 0) hash ^= Power.GetHashCode();
      if (Coin != 0) hash ^= Coin.GetHashCode();
      if (Diamond != 0) hash ^= Diamond.GetHashCode();
      if (Crystal != 0) hash ^= Crystal.GetHashCode();
      if (Hp != 0) hash ^= Hp.GetHashCode();
      if (Ad != 0) hash ^= Ad.GetHashCode();
      if (Ap != 0) hash ^= Ap.GetHashCode();
      if (Addef != 0) hash ^= Addef.GetHashCode();
      if (Apdef != 0) hash ^= Apdef.GetHashCode();
      if (Dodge != 0) hash ^= Dodge.GetHashCode();
      if (Pierce != 0) hash ^= Pierce.GetHashCode();
      if (Critical != 0) hash ^= Critical.GetHashCode();
      if (Guideid != 0) hash ^= Guideid.GetHashCode();
      hash ^= strongArr_.GetHashCode();
      if (Time != 0L) hash ^= Time.GetHashCode();
      hash ^= taskArr_.GetHashCode();
      if (Fuben != 0) hash ^= Fuben.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Lv != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Lv);
      }
      if (Exp != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Exp);
      }
      if (Power != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Power);
      }
      if (Coin != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Coin);
      }
      if (Diamond != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Diamond);
      }
      if (Crystal != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Crystal);
      }
      if (Hp != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Hp);
      }
      if (Ad != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Ad);
      }
      if (Ap != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Ap);
      }
      if (Addef != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Addef);
      }
      if (Apdef != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(Apdef);
      }
      if (Dodge != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(Dodge);
      }
      if (Pierce != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(Pierce);
      }
      if (Critical != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(Critical);
      }
      if (Guideid != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(Guideid);
      }
      strongArr_.WriteTo(output, _repeated_strongArr_codec);
      if (Time != 0L) {
        output.WriteRawTag(152, 1);
        output.WriteInt64(Time);
      }
      taskArr_.WriteTo(output, _repeated_taskArr_codec);
      if (Fuben != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(Fuben);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Lv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lv);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
      }
      if (Power != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Power);
      }
      if (Coin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Coin);
      }
      if (Diamond != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Diamond);
      }
      if (Crystal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Crystal);
      }
      if (Hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
      }
      if (Ad != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ad);
      }
      if (Ap != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ap);
      }
      if (Addef != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Addef);
      }
      if (Apdef != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Apdef);
      }
      if (Dodge != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Dodge);
      }
      if (Pierce != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pierce);
      }
      if (Critical != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Critical);
      }
      if (Guideid != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Guideid);
      }
      size += strongArr_.CalculateSize(_repeated_strongArr_codec);
      if (Time != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      size += taskArr_.CalculateSize(_repeated_taskArr_codec);
      if (Fuben != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Fuben);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerData other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Lv != 0) {
        Lv = other.Lv;
      }
      if (other.Exp != 0) {
        Exp = other.Exp;
      }
      if (other.Power != 0) {
        Power = other.Power;
      }
      if (other.Coin != 0) {
        Coin = other.Coin;
      }
      if (other.Diamond != 0) {
        Diamond = other.Diamond;
      }
      if (other.Crystal != 0) {
        Crystal = other.Crystal;
      }
      if (other.Hp != 0) {
        Hp = other.Hp;
      }
      if (other.Ad != 0) {
        Ad = other.Ad;
      }
      if (other.Ap != 0) {
        Ap = other.Ap;
      }
      if (other.Addef != 0) {
        Addef = other.Addef;
      }
      if (other.Apdef != 0) {
        Apdef = other.Apdef;
      }
      if (other.Dodge != 0) {
        Dodge = other.Dodge;
      }
      if (other.Pierce != 0) {
        Pierce = other.Pierce;
      }
      if (other.Critical != 0) {
        Critical = other.Critical;
      }
      if (other.Guideid != 0) {
        Guideid = other.Guideid;
      }
      strongArr_.Add(other.strongArr_);
      if (other.Time != 0L) {
        Time = other.Time;
      }
      taskArr_.Add(other.taskArr_);
      if (other.Fuben != 0) {
        Fuben = other.Fuben;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Lv = input.ReadInt32();
            break;
          }
          case 32: {
            Exp = input.ReadInt32();
            break;
          }
          case 40: {
            Power = input.ReadInt32();
            break;
          }
          case 48: {
            Coin = input.ReadInt32();
            break;
          }
          case 56: {
            Diamond = input.ReadInt32();
            break;
          }
          case 64: {
            Crystal = input.ReadInt32();
            break;
          }
          case 72: {
            Hp = input.ReadInt32();
            break;
          }
          case 80: {
            Ad = input.ReadInt32();
            break;
          }
          case 88: {
            Ap = input.ReadInt32();
            break;
          }
          case 96: {
            Addef = input.ReadInt32();
            break;
          }
          case 104: {
            Apdef = input.ReadInt32();
            break;
          }
          case 112: {
            Dodge = input.ReadInt32();
            break;
          }
          case 120: {
            Pierce = input.ReadInt32();
            break;
          }
          case 128: {
            Critical = input.ReadInt32();
            break;
          }
          case 136: {
            Guideid = input.ReadInt32();
            break;
          }
          case 146:
          case 144: {
            strongArr_.AddEntriesFrom(input, _repeated_strongArr_codec);
            break;
          }
          case 152: {
            Time = input.ReadInt64();
            break;
          }
          case 162: {
            taskArr_.AddEntriesFrom(input, _repeated_taskArr_codec);
            break;
          }
          case 168: {
            Fuben = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
