// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Strong.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace GameMessage {

  /// <summary>Holder for reflection information generated from Strong.proto</summary>
  public static partial class StrongReflection {

    #region Descriptor
    /// <summary>File descriptor for Strong.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static StrongReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxTdHJvbmcucHJvdG8SC0dhbWVNZXNzYWdlIhgKCVJlcVN0cm9uZxILCgNw",
            "b3MYASABKAUifwoJUnNwU3Ryb25nEgwKBGNvaW4YASABKAUSDwoHY3J5c3Rh",
            "bBgCIAEoBRIKCgJocBgDIAEoBRIKCgJhZBgEIAEoBRIKCgJhcBgFIAEoBRIN",
            "CgVhZGRlZhgGIAEoBRINCgVhcGRlZhgHIAEoBRIRCglzdHJvbmdBcnIYCCAD",
            "KAViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMessage.ReqStrong), global::GameMessage.ReqStrong.Parser, new[]{ "Pos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMessage.RspStrong), global::GameMessage.RspStrong.Parser, new[]{ "Coin", "Crystal", "Hp", "Ad", "Ap", "Addef", "Apdef", "StrongArr" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ReqStrong : pb::IMessage<ReqStrong> {
    private static readonly pb::MessageParser<ReqStrong> _parser = new pb::MessageParser<ReqStrong>(() => new ReqStrong());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqStrong> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMessage.StrongReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqStrong() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqStrong(ReqStrong other) : this() {
      pos_ = other.pos_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqStrong Clone() {
      return new ReqStrong(this);
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 1;
    private int pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqStrong);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqStrong other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pos != other.Pos) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pos != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqStrong other) {
      if (other == null) {
        return;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pos = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RspStrong : pb::IMessage<RspStrong> {
    private static readonly pb::MessageParser<RspStrong> _parser = new pb::MessageParser<RspStrong>(() => new RspStrong());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RspStrong> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMessage.StrongReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RspStrong() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RspStrong(RspStrong other) : this() {
      coin_ = other.coin_;
      crystal_ = other.crystal_;
      hp_ = other.hp_;
      ad_ = other.ad_;
      ap_ = other.ap_;
      addef_ = other.addef_;
      apdef_ = other.apdef_;
      strongArr_ = other.strongArr_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RspStrong Clone() {
      return new RspStrong(this);
    }

    /// <summary>Field number for the "coin" field.</summary>
    public const int CoinFieldNumber = 1;
    private int coin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Coin {
      get { return coin_; }
      set {
        coin_ = value;
      }
    }

    /// <summary>Field number for the "crystal" field.</summary>
    public const int CrystalFieldNumber = 2;
    private int crystal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Crystal {
      get { return crystal_; }
      set {
        crystal_ = value;
      }
    }

    /// <summary>Field number for the "hp" field.</summary>
    public const int HpFieldNumber = 3;
    private int hp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    /// <summary>Field number for the "ad" field.</summary>
    public const int AdFieldNumber = 4;
    private int ad_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ad {
      get { return ad_; }
      set {
        ad_ = value;
      }
    }

    /// <summary>Field number for the "ap" field.</summary>
    public const int ApFieldNumber = 5;
    private int ap_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ap {
      get { return ap_; }
      set {
        ap_ = value;
      }
    }

    /// <summary>Field number for the "addef" field.</summary>
    public const int AddefFieldNumber = 6;
    private int addef_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Addef {
      get { return addef_; }
      set {
        addef_ = value;
      }
    }

    /// <summary>Field number for the "apdef" field.</summary>
    public const int ApdefFieldNumber = 7;
    private int apdef_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Apdef {
      get { return apdef_; }
      set {
        apdef_ = value;
      }
    }

    /// <summary>Field number for the "strongArr" field.</summary>
    public const int StrongArrFieldNumber = 8;
    private static readonly pb::FieldCodec<int> _repeated_strongArr_codec
        = pb::FieldCodec.ForInt32(66);
    private readonly pbc::RepeatedField<int> strongArr_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> StrongArr {
      get { return strongArr_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RspStrong);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RspStrong other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Coin != other.Coin) return false;
      if (Crystal != other.Crystal) return false;
      if (Hp != other.Hp) return false;
      if (Ad != other.Ad) return false;
      if (Ap != other.Ap) return false;
      if (Addef != other.Addef) return false;
      if (Apdef != other.Apdef) return false;
      if(!strongArr_.Equals(other.strongArr_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Coin != 0) hash ^= Coin.GetHashCode();
      if (Crystal != 0) hash ^= Crystal.GetHashCode();
      if (Hp != 0) hash ^= Hp.GetHashCode();
      if (Ad != 0) hash ^= Ad.GetHashCode();
      if (Ap != 0) hash ^= Ap.GetHashCode();
      if (Addef != 0) hash ^= Addef.GetHashCode();
      if (Apdef != 0) hash ^= Apdef.GetHashCode();
      hash ^= strongArr_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Coin != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Coin);
      }
      if (Crystal != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Crystal);
      }
      if (Hp != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Hp);
      }
      if (Ad != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Ad);
      }
      if (Ap != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Ap);
      }
      if (Addef != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Addef);
      }
      if (Apdef != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Apdef);
      }
      strongArr_.WriteTo(output, _repeated_strongArr_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Coin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Coin);
      }
      if (Crystal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Crystal);
      }
      if (Hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
      }
      if (Ad != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ad);
      }
      if (Ap != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ap);
      }
      if (Addef != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Addef);
      }
      if (Apdef != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Apdef);
      }
      size += strongArr_.CalculateSize(_repeated_strongArr_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RspStrong other) {
      if (other == null) {
        return;
      }
      if (other.Coin != 0) {
        Coin = other.Coin;
      }
      if (other.Crystal != 0) {
        Crystal = other.Crystal;
      }
      if (other.Hp != 0) {
        Hp = other.Hp;
      }
      if (other.Ad != 0) {
        Ad = other.Ad;
      }
      if (other.Ap != 0) {
        Ap = other.Ap;
      }
      if (other.Addef != 0) {
        Addef = other.Addef;
      }
      if (other.Apdef != 0) {
        Apdef = other.Apdef;
      }
      strongArr_.Add(other.strongArr_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Coin = input.ReadInt32();
            break;
          }
          case 16: {
            Crystal = input.ReadInt32();
            break;
          }
          case 24: {
            Hp = input.ReadInt32();
            break;
          }
          case 32: {
            Ad = input.ReadInt32();
            break;
          }
          case 40: {
            Ap = input.ReadInt32();
            break;
          }
          case 48: {
            Addef = input.ReadInt32();
            break;
          }
          case 56: {
            Apdef = input.ReadInt32();
            break;
          }
          case 66:
          case 64: {
            strongArr_.AddEntriesFrom(input, _repeated_strongArr_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
